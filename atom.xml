<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jun's Burg]]></title>
  <link href="http://wilsonlj.github.io/atom.xml" rel="self"/>
  <link href="http://wilsonlj.github.io/"/>
  <updated>2014-03-26T12:40:25+01:00</updated>
  <id>http://wilsonlj.github.io/</id>
  <author>
    <name><![CDATA[Jun Liu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[又一Python脑残粉]]></title>
    <link href="http://wilsonlj.github.io/blog/2014/03/26/tooyoung/"/>
    <updated>2014-03-26T12:12:02+01:00</updated>
    <id>http://wilsonlj.github.io/blog/2014/03/26/tooyoung</id>
    <content type="html"><![CDATA[<p>自从用上Python，感觉生活一下子美好了不少，分分钟你的想法就可以实现，而且是最实用的那些，“刷个网页抢个票，下个小片摇个号”，甚至还因为Python和扯淡的研究方向找到了份装逼的实习。Python的好处在于语法的精炼、脚本的便捷、开源库的可扩展性，虽然编译速度和作为大型开发项目的能力欠缺，但是作为家庭小助手那是最适合不过的。这也就是为什么会有这么多编程语言存在的原因，满足不同的需求，每个人对不同任务的学习曲线、规模大小、适用范围、自由程度、敏捷程度、运行速度等需求都不尽相同，因此诞生了满足不同需求的各种工具，各取所需即可，没什么好争的。</p>

<!-- more -->


<p>今天又闲着做了波大食堂的每日晚餐菜单邮件推送并加上自动Google图片搜索来配图，用到了Python的urllib、smtplib、email、json、pygame、Image等库，从爬网页、Google
API的JSON解析、字体渲染、图片压缩和合成到最后邮件服务器的发送，真是瑞士军刀级的小程序，最后附上初步效果图一张，不断升级中：</p>

<p><img src="http://wilsonlj.github.io/images/menu.jpg" alt="Menu" /></p>

<p>想想以前做中文处理时候被utf8和gbk搞死了，中文网站的编码各种不统一，甚至爬下来的一个网页里还有几种编码，当时觉得以后的环境不用处理CJK好轻松；现在到了德国才发现还有unicode和äöüß，用Google
Image API把西兰花土豆活生生变成了牛肉土豆，我还是太年轻了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[论多种范式语言的重要性]]></title>
    <link href="http://wilsonlj.github.io/blog/2014/03/18/leetcode/"/>
    <updated>2014-03-18T18:28:33+01:00</updated>
    <id>http://wilsonlj.github.io/blog/2014/03/18/leetcode</id>
    <content type="html"><![CDATA[<p>趁着放假有闲暇，赶紧把leetcode刷一下，鉴于网上leetcode答案已经太多了我就不贴了。但做到这道<a href="http://oj.leetcode.com/problems/reverse-words-in-a-string/">翻转字符串</a>，在C++下痛苦地用着string终于AC完后，忍不住拿出Python，十秒钟思考了下然后一句话未测试直接AC。。。所以还是术业有专攻的好，即使是不同的程序语言也该各司其责，性能为王C++，文本处理用Python，还觉得慢CPython下，这样即能加速程序员的思考，然后也能用元编程的方法提高程序本身的性能，用分层来提升性能果然是计算机结构设计的万金油。</p>

<p>最后奉上代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span><span class="o">!=</span><span class="s">&#39;&#39;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译随手摘]]></title>
    <link href="http://wilsonlj.github.io/blog/2014/03/15/compiler/"/>
    <updated>2014-03-15T15:43:08+01:00</updated>
    <id>http://wilsonlj.github.io/blog/2014/03/15/compiler</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">b</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="kc">true</span><span class="o">:</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">ival</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="kc">false</span><span class="o">:</span>
</span><span class='line'>            <span class="n">ival</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ival</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>来自知乎的一问，简单来说就是编译时该声明定义的都做了，运行时再赋值，所以此处能正常输出，否则若<code>//int ival</code>、<code>string ival</code>、互换顺序都会报错，编译小白看完答案只能默默点赞，回去恶补编译原理，以此立志。</p>

<p>这不是今天的重点，而是想讨论学习、努力、兴趣和聪明。Linkedin和GitHub随手一刷，几个女程序员简直就是逆天，清华、CMU、Cornell，MSRA、Linkedin、Hulu、Blackstone各种实习，110+的托福，码起代码也毫不含糊，之前还玩ACM，Matrix67上的题10分钟一道，再回望那些拿Google、Facebook offer的温拿们也都是算法人才（都经过OJ和leetcode历练），才能达到顶尖IT公司对人才“聪明”的要求。大家都在找“聪明”的人，到底什么是聪明？最简单的量化标准是智商，但智商这种东西一不靠谱二不能强求，大多数人的智商在同一个层次上。作为凡人，需要的是更稳定更加系统的理论，那些可以复制的经验。方法论我觉得也不合适，同一个方法给同样智商的人出来的效果肯定也不同。在我这个有限的特征选择里，就只剩下努力和兴趣了，那一个人会为什么努力？假设反复做一件事没有正反馈或者永远收益极低，你还会有坚持努力吗？因此努力必须有正反馈或者让你在挫败中还能坚持下来的理由，我们称之为动机。那么一个人没有动机或者没有正反馈那么他就不会坚持在某方面的成长，那么努力的人一定是有他的动机或者只是他擅长做这件事正反馈比较大而已。那兴趣算什么？我觉得放在正反馈里比较合适，比如成绩是种正反馈，资产是种正反馈，积分是种正反馈，而兴趣给你精神上的正反馈。那么要想积极向上，一定需要动机或者正反馈，而动机这种东西不是你主观想象出来的，更多是环境被动给你的，你能做的就是找到正反馈，简而言之就是你擅长或者你乐于做得事情。这种挖掘需要机缘，需要经历，需要具有广度的体验，或许才能发现属于你的专长或者爱好（臆想牛人只是更早的发现了自己的兴趣或者获得了正反馈）。如果你生活安逸（没有动机），思想从众（没有即使只有负反馈也还能保持的兴趣)，表现平平（没有正反馈），那么大多数人也不会努力提升自己了。拿自己为例，小时候表型平平，在考满分有玩具（动机）的刺激下，努力学习发现数学还不错（出现正反馈），开始了在数学上的努力使得大学前生涯还算不错。大学开始了到了一种没啥目标没啥兴趣没啥正反馈的混吃等死状态，学习也好玩儿也好，都不是努力，只是让自己看得下去而已，所以现在必须找出点正反馈努力起来。看过这么多行业种种、社会阶层再分析自身，还是觉得计算机最适合自己，提升为兴趣，突然感觉很多以前一看就头大的泛函分析、SVM也没那么复杂而无用了，多看两遍坚持下来还是能够理解（因为大学很多内容毕竟不是一眼就能看懂的，所以说要选择适合自己的专业，或者开个好头有点正反馈），视野瞬间开阔了，不再那么迷茫，需要的只是时间和坚持来弥补逝去的徘徊。</p>

<p>码了这么多，只是想说，以后这里就是个以技术经验分享为主的空间了！描述问题和解决方法的过程本身能提高对问题的理解和文字表达能力，也希望如果能给别人一些借鉴那更好了。作为不推广、不盈利的私人博客，也只有有价值或者技术含量的帖子才会被人发现，比如温拿的人生思考、美女的旅游经验和照片、技术贴（包括计算机科学，编程技术，刷机贴膜）。即使没有来访者的正反馈，也要靠兴趣坚持下去（每天commit到Github上就像升级一样也算正反馈了，强迫症患者的最爱）。</p>

<p>Heureka！// 你他喵总是没头没脑没逻辑么！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coming Again]]></title>
    <link href="http://wilsonlj.github.io/blog/2014/03/14/coming-again/"/>
    <updated>2014-03-14T12:02:18+01:00</updated>
    <id>http://wilsonlj.github.io/blog/2014/03/14/coming-again</id>
    <content type="html"><![CDATA[<p>又捣鼓了一天，收获还是很多的，其中最大的莫过于玩透了GitHub，找到了Windows下Shell的替代品——Git Bash！启动迅速（秒杀Powershell），支持Bash常用命令（<code>grep</code>什么的最爱了，秒杀cmd），还能直接Vim（可惜高亮还没整出来）。在Git Bash下<code>uname -a</code>居然是MINGW32，再研究研究说不定cygwin什么的更加合适。感觉以前没事就重装系统，现在可以进化为没事就去换个服务器了。前端技术也要玩儿起来了，用上Octopress不学点Ruby似乎也是不可能的，而且GitHub + JavaScript还是能做出许多有意思的东西的。</p>

<p>本来想着OJ开始先刷起来，Programmer和Developer两手抓，但琢磨下还是等系统地看完书后再刷算了，毕竟不是小屁孩能边捣鼓边看书然后突然有天茅塞顿开，在一年内要刷出四年功力只有更加高效的系统学习才能保证天天开，因为毕竟光靠技术贴和刷题还是不够全面的。从操作系统、编译器、多种范式的语言、设计模式、软件工程、网络、分布式多面开花，才能体会那种地图全开的Full Stack模式，必然异常舒爽。</p>

<!-- more -->


<p>网上大多数经验贴都是从自己经历过程的角度来总结，而不是考虑到各个起点不同的看客，从Google一路找来的的小白们搞不定、结果与他人不同时那叫一个捉急，导致他人学习效率低下，每次只能从数片经验贴中找出或者总结出适合自己的方法，然后又成为一片新的经验贴。而且往往总结了也不代表作者真的掌握了所有，比如换个环境可能就挂了。所以为什么不像写文档、接口一样，写清楚每一个细节呢？作为技术博客，我觉得贴出自己的环境版本以及每一步具体的操作（很多细节比如位置、权限等），就像做实验一样可重复验证的，对作者掌握和理解有好处，对读者寻找适合自己的方法也更加高效。或许这也是国外计算机著作都是洋洋洒洒上千页的原因，它考虑到了不同层次读者的认知程度与需求。把读者当做小黄鸭，这样的Debug方法对自己也帮助，这不也是大家写博客的原因之一嘛。</p>

<p>有事没事写点自己的思考、人生观、世界观、价值观还是很有意思的，博客就像Git一样记录了自己思维演变的过程，每篇文字都是一个Snapshot，看到别人有趣的思想你可以Fork过来，评论还能Commit回去，所有的博客组成了一个GitHub。但从反面说，自己的三观其实是很私人的东西，你读的书、看的片其实都是对自己认知、阶层的定位（土豪除外），什么都显山露水的会带来意想不到的事情（这时或许就需要Private账户了），毕竟思想认知程度也是成正态分布或者指数分布，不是每个人看过《乌合之众》从此人类就不会盲从了，生存、社会、现实、精神之间的流动就像化学反应，永远不会有一端完全反应完，而更像一个均衡，我们能做的就是在一个超高维向量上不断迭代进步。又扯远了。而且我的文字读起来就是码农风，何时才能有朱老师那种文（sao）风（qi）。</p>

<p>其实这篇只是想测试下中文题目，而且前一篇已经证明测试通过了。。对着竖屏的Sublime、在机械键盘上敲着不管是文字还是代码，完全停不下来；尤其是文字，对于擅长思（fa）辨（dai）的人士来说，码一下午就是做了一下午的手指马杀鸡。说得博客人人必备一样，但这陈年旧货明明是高中时代最为风靡，人人都写个MSN Blog，我也没玩儿；到了社交时代，大家写日志，天天刷微博，我连分享都懒得点。现有了自己的独立博客，反而开始瞎哔哔了（虽然早就开始在Evernote里随便写点，但介于Evernote简（chou）单（lou）的界面，每次不会超过两行）。或许是有思考有东西写了；又或许是感觉有属于自己的独立博客而不是从大流的俗物，更像是自己的一个品牌；亦或是一直在学习、阅读、输入，是该有点输出了，传播思考的价值（即使是垃圾信息），否则人类怎么进步？！反正，贱人就是矫情。</p>

<p>以上。我的披萨好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要Hello World]]></title>
    <link href="http://wilsonlj.github.io/blog/2014/03/13/hello-world/"/>
    <updated>2014-03-13T17:34:40+01:00</updated>
    <id>http://wilsonlj.github.io/blog/2014/03/13/hello-world</id>
    <content type="html"><![CDATA[<p>Godaddy + Git + GitHub + Jekyll + Octopress 捣鼓了半天，最终章Boss：Octopress这玩意儿还是挺蛋疼的。。没感觉比自己写省力多少，每次还要generate和deploy，sass也没个说明，再研究研究。。好的一面是，it works！</p>
]]></content>
  </entry>
  
</feed>
